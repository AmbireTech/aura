{"version":3,"file":"portfolio.js","sourceRoot":"","sources":["../../../lib/utils/portfolio.ts"],"names":[],"mappings":"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","sourcesContent":["import fetch from 'node-fetch'\nimport { networks } from 'ambire-common/dist/src/consts/networks'\nimport { getRpcProvider } from 'ambire-common/dist/src/services/provider/getRpcProvider'\nimport { Portfolio } from 'ambire-common/dist/src/libs/portfolio'\nimport { llmMockProcess } from './llm/mockedAI'\nimport { simplePrompt } from './prompts'\nimport { EMPTY_PORTFOLIO_STRATEGIES } from './strategies'\nimport {\n    PortfolioForNetwork,\n    ProcessAddressProps,\n    AuraResponse_01,\n    NetworkPortfolioLibResponse\n} from '../types'\n\n// import { z } from 'zod'\n// import { ACTION_OPERATION_TYPES, RISK_TYPES } from '..'\n// import { zodResponseFormat } from 'openai/helpers/zod'\n\n//  const ActionZodSchema = z.object({\n//     tokens: z.string({\n//         description:\n//             'Comma-separated list of symbols of the involved crypto currencies or tokens, for example: USDC, ETH'\n//     }),\n//     description: z.string({\n//         description: 'Free text describing the action concerning the related tokens, the platform to use and expected APY'\n//     }),\n//     platforms: z.array(\n//         z.string({\n//             description: 'DeFi platform name'\n//         }),\n//         { description: 'The DeFi platform(s) which is to be used for the action' }\n//     ),\n//     networks: z.array(\n//         z.string({\n//             description: 'Lower-cased name of blockchain network'\n//         }),\n//         {\n//             description:\n//                 'The name of the blockchain network(s) which the action is to be executed on'\n//         }\n//     ),\n//     operations: z.array(z.enum(ACTION_OPERATION_TYPES, { description: 'DeFi operation type' }), {\n//         description: 'The DeFi operation type(s) used of the action'\n//     }),\n//     apy: z.string({\n//         description:\n//             'The annual yield that can be expected from this action. Example values: 3%, 5%, 8-10%'\n//     })\n// })\n\n//  const StrategyZodSchema = z.object({\n//     name: z.string({ description: 'Name of the strategy' }),\n//     risk: z.enum(RISK_TYPES, {\n//         description: 'Risk level of the strategy'\n//     }),\n//     actions: z.array(ActionZodSchema, { description: 'List of actions for the strategy' })\n// })\n\n//  const StrategiesZodSchema = z.object({\n//     strategies: z.array(StrategyZodSchema, { description: 'List of strategies' })\n// })\n\nexport async function getPortfolioForNetwork(\n    address: string,\n    networkId: string\n): Promise<NetworkPortfolioLibResponse> {\n    const network = networks.find((n: any) => n.id === networkId)\n    if (!network) throw new Error(`Failed to find ${networkId} in configured networks`)\n\n    const provider = getRpcProvider(network.rpcUrls, network.chainId)\n    const portfolio = new Portfolio(\n        fetch,\n        provider,\n        network,\n        'https://relayer.ambire.com/velcro-v3'\n    )\n\n    return portfolio.get(address, { baseCurrency: 'usd' })\n}\n\nexport async function getPortfolioVelcroV3(address: string): Promise<PortfolioForNetwork[]> {\n    const output: PortfolioForNetwork[] = []\n\n    const responses = await Promise.all(\n        networks.map((network) => getPortfolioForNetwork(address, network.id))\n    )\n\n    for (const resp of responses) {\n        const tokens = resp.tokens\n            .filter((t) => t.amount > 0n)\n            .map((t) => {\n                const balance = Number(t.amount) / Math.pow(10, t.decimals)\n                const priceUSD = (t.priceIn.find((p) => p.baseCurrency === 'usd') || { price: 0 })\n                    .price\n\n                return {\n                    symbol: t.symbol,\n                    balance,\n                    balanceUSD: balance * priceUSD,\n                    network: t.networkId,\n                    address: t.address\n                }\n            })\n\n        if (!tokens.length) {\n            continue\n        }\n\n        output.push({\n            network: tokens[0].network,\n            tokens\n        })\n    }\n\n    return output\n}\n\nexport const processAddress = async (\n    {\n        address,\n        getPortfolio,\n        makePrompt,\n        llmProcessor,\n        model,\n        llmOptionsOverride\n    }: ProcessAddressProps = {\n        address: '0x69bfD720Dd188B8BB04C4b4D24442D3c15576D10',\n        getPortfolio: getPortfolioVelcroV3,\n        makePrompt: simplePrompt,\n        llmProcessor: llmMockProcess\n    }\n): Promise<AuraResponse_01> => {\n    const portfolio = await getPortfolio(address)\n\n    if (!portfolio.length) {\n        return {\n            address,\n            portfolio,\n            strategies: [\n                {\n                    llm: {\n                        provider: 'local',\n                        model: 'local'\n                    },\n                    response: EMPTY_PORTFOLIO_STRATEGIES\n                }\n            ]\n        }\n    }\n\n    const prompt = await makePrompt({ portfolio })\n    const strategies = await llmProcessor({ prompt, model, llmOptionsOverride })\n\n    return {\n        address,\n        portfolio,\n        strategies: [strategies]\n    }\n}\n"]}