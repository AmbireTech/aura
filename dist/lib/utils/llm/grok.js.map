{"version":3,"file":"grok.js","sourceRoot":"","sources":["../../../../lib/utils/llm/grok.ts"],"names":[],"mappings":";;;AAcA,4BAkCC;;AAhDD,4DAA2B;AAC3B,4CAAsD;AAEtD,0CAAsD;AAEzC,QAAA,UAAU,GAAG;IACtB,WAAW,EAAE,eAAe;CAC/B,CAAA;AAED,MAAM,SAAS,GAAG,IAAI,gBAAM,CAAC;IACzB,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,EAAE;IACtC,OAAO,EAAE,qBAAqB;CACjC,CAAC,CAAA;AAEK,KAAK,UAAU,QAAQ,CAAC,QAAyB;IACpD,IAAI,MAAM,GAAG,IAAI,CAAA;IACjB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,kBAAU,CAAC,WAAW,CAAA;IAEtD,MAAM,UAAU,GAAG,MAAM,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;QACvD,KAAK;QACL,KAAK,EAAE,IAAI;QACX,QAAQ,EAAE;YACN;gBACI,IAAI,EAAE,QAAQ;gBACd,OAAO,EACH,6GAA6G;aACpH;YACD,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,MAAM,EAAE;SAC7C;QACD,eAAe,EAAE,IAAA,uBAAiB,EAAC,yBAAmB,EAAE,YAAY,CAAC;KACxE,CAAC,CAAA;IAEF,MAAM,aAAa,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAA;IAEnE,IAAI,CAAC;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,aAAa,CAA+B,CAAA;QACtE,MAAM,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAA;IACpC,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAA;IACzD,CAAC;IAED,OAAO;QACH,GAAG,EAAE;YACD,QAAQ,EAAE,KAAK;YACf,KAAK;SACR;QACD,QAAQ,EAAE,MAAM;KACnB,CAAA;AACL,CAAC","sourcesContent":["import OpenAI from 'openai'\nimport { zodResponseFormat } from 'openai/helpers/zod'\nimport { LlmProcessOutput, LlmProcessProps, Strategy } from '../../types'\nimport { StrategiesZodSchema } from './structures/zod'\n\nexport const XAI_MODELS = {\n    grok2latest: 'grok-2-latest'\n}\n\nconst apiClient = new OpenAI({\n    apiKey: process.env.X_AI_API_KEY || '',\n    baseURL: 'https://api.x.ai/v1'\n})\n\nexport async function callGrok(llmInput: LlmProcessProps): Promise<LlmProcessOutput> {\n    let output = null\n    const model = llmInput.model || XAI_MODELS.grok2latest\n\n    const completion = await apiClient.chat.completions.create({\n        model,\n        store: true,\n        messages: [\n            {\n                role: 'system',\n                content:\n                    'You are an expert in cryptocurrencies, DeFi applications and their use cases. Return output in JSON format.'\n            },\n            { role: 'user', content: llmInput.prompt }\n        ],\n        response_format: zodResponseFormat(StrategiesZodSchema, 'strategies')\n    })\n\n    const outputContent = completion.choices[0].message.content || '{}'\n\n    try {\n        const parsed = JSON.parse(outputContent) as { strategies: Strategy[] }\n        output = parsed.strategies || []\n    } catch (error) {\n        console.error('Invalid JSON in Grok output: ', error)\n    }\n\n    return {\n        llm: {\n            provider: 'xAI',\n            model\n        },\n        response: output\n    }\n}\n"]}