{"version":3,"file":"zod.js","sourceRoot":"","sources":["../../../../../lib/utils/llm/structures/zod.ts"],"names":[],"mappings":";;;AAAA,6BAAuB;AACvB,qCAA6D;AAEhD,QAAA,eAAe,GAAG,OAAC,CAAC,MAAM,CAAC;IACpC,MAAM,EAAE,OAAC,CAAC,MAAM,CAAC;QACb,WAAW,EACP,qGAAqG;KAC5G,CAAC;IACF,WAAW,EAAE,OAAC,CAAC,MAAM,CAAC;QAClB,WAAW,EACP,qGAAqG;KAC5G,CAAC;IACF,SAAS,EAAE,OAAC,CAAC,KAAK,CACd,OAAC,CAAC,MAAM,CAAC;QACL,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC;YACX,WAAW,EAAE,oBAAoB;SACpC,CAAC;QACF,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC;YACV,WAAW,EAAE,yCAAyC;SACzD,CAAC;KACL,CAAC,EACF,EAAE,WAAW,EAAE,gDAAgD,EAAE,CACpE;IACD,QAAQ,EAAE,OAAC,CAAC,KAAK,CACb,OAAC,CAAC,MAAM,CAAC;QACL,WAAW,EAAE,wCAAwC;KACxD,CAAC,EACF;QACI,WAAW,EACP,6EAA6E;KACpF,CACJ;IACD,UAAU,EAAE,OAAC,CAAC,KAAK,CAAC,OAAC,CAAC,IAAI,CAAC,+BAAsB,EAAE,EAAE,WAAW,EAAE,qBAAqB,EAAE,CAAC,EAAE;QACxF,WAAW,EAAE,+CAA+C;KAC/D,CAAC;IACF,GAAG,EAAE,OAAC,CAAC,MAAM,CAAC;QACV,WAAW,EACP,uFAAuF;KAC9F,CAAC;CACL,CAAC,CAAA;AAEW,QAAA,iBAAiB,GAAG,OAAC,CAAC,MAAM,CAAC;IACtC,IAAI,EAAE,OAAC,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,sBAAsB,EAAE,CAAC;IACvD,IAAI,EAAE,OAAC,CAAC,IAAI,CAAC,mBAAU,EAAE;QACrB,WAAW,EAAE,4BAA4B;KAC5C,CAAC;IACF,OAAO,EAAE,OAAC,CAAC,KAAK,CAAC,uBAAe,EAAE,EAAE,WAAW,EAAE,kCAAkC,EAAE,CAAC;CACzF,CAAC,CAAA;AAEW,QAAA,mBAAmB,GAAG,OAAC,CAAC,MAAM,CAAC;IACxC,UAAU,EAAE,OAAC,CAAC,KAAK,CAAC,yBAAiB,EAAE,EAAE,WAAW,EAAE,oBAAoB,EAAE,CAAC;CAChF,CAAC,CAAA","sourcesContent":["import { z } from 'zod'\nimport { ACTION_OPERATION_TYPES, RISK_TYPES } from './common'\n\nexport const ActionZodSchema = z.object({\n    tokens: z.string({\n        description:\n            'Comma-separated list of symbols of the involved crypto currencies or tokens, for example: USDC, ETH'\n    }),\n    description: z.string({\n        description:\n            'Free text describing the action concerning the related tokens, the platform to use and expected APY'\n    }),\n    platforms: z.array(\n        z.object({\n            name: z.string({\n                description: 'DeFi platform name'\n            }),\n            url: z.string({\n                description: 'Verified HTTPS URL of the DeFi platform'\n            })\n        }),\n        { description: 'The DeFi platform(s) to be used for the action' }\n    ),\n    networks: z.array(\n        z.string({\n            description: 'Lower-cased name of blockchain network'\n        }),\n        {\n            description:\n                'The name of the blockchain network(s) which the action is to be executed on'\n        }\n    ),\n    operations: z.array(z.enum(ACTION_OPERATION_TYPES, { description: 'DeFi operation type' }), {\n        description: 'The DeFi operation type(s) used of the action'\n    }),\n    apy: z.string({\n        description:\n            'The annual yield that can be expected from this action. Example values: 3%, 5%, 8-10%'\n    })\n})\n\nexport const StrategyZodSchema = z.object({\n    name: z.string({ description: 'Name of the strategy' }),\n    risk: z.enum(RISK_TYPES, {\n        description: 'Risk level of the strategy'\n    }),\n    actions: z.array(ActionZodSchema, { description: 'List of actions for the strategy' })\n})\n\nexport const StrategiesZodSchema = z.object({\n    strategies: z.array(StrategyZodSchema, { description: 'List of strategies' })\n})\n"]}