{"version":3,"file":"gemini.js","sourceRoot":"","sources":["../../../../lib/utils/llm/gemini.ts"],"names":[],"mappings":";;;AAYA,gCAqCC;AAjDD,yDAA0D;AAE1D,sCAA0C;AAC1C,gDAA4D;AAE/C,QAAA,aAAa,GAAG;IACzB,gBAAgB,EAAE,sBAAsB;IACxC,kBAAkB,EAAE,8BAA8B;CACrD,CAAA;AAED,MAAM,KAAK,GAAG,IAAI,kCAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;AAEtE,KAAK,UAAU,UAAU,CAAC,QAAyB;IACtD,IAAI,MAAM,GAAG,IAAI,CAAA;IACjB,IAAI,KAAK,GAAG,IAAI,CAAA;IAChB,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,qBAAa,CAAC,gBAAgB,CAAA;IAE9D,IAAI,CAAC;QACD,MAAM,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC;YACrC,KAAK;YACL,gBAAgB,EAAE;gBACd,gBAAgB,EAAE,kBAAkB;gBACpC,cAAc,EAAE,+BAAsB;aACzC;SACJ,CAAC,CAAA;QACF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC7D,sCAAsC;QAEtC,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;QAEtC,IAAI,CAAC;YACD,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAe,CAAA;QACtD,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACX,KAAK,GAAG,IAAA,uBAAc,EAAC,GAAG,CAAC,CAAA;YAC3B,OAAO,CAAC,KAAK,CAAC,qCAAqC,KAAK,EAAE,CAAC,CAAA;QAC/D,CAAC;IACL,CAAC;IAAC,OAAO,GAAG,EAAE,CAAC;QACX,KAAK,GAAG,IAAA,uBAAc,EAAC,GAAG,CAAC,CAAA;QAC3B,OAAO,CAAC,KAAK,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAA;IACvD,CAAC;IAED,OAAO;QACH,GAAG,EAAE;YACD,QAAQ,EAAE,QAAQ;YAClB,KAAK;SACR;QACD,QAAQ,EAAE,MAAM;QAChB,KAAK;KACR,CAAA;AACL,CAAC","sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai'\nimport { LlmProcessOutput, LlmProcessProps, Strategy } from '../../types'\nimport { stringifyError } from '../errors'\nimport { StrategiesGoogleSchema } from './structures/google'\n\nexport const GEMINI_MODELS = {\n    gemini20flashExp: 'gemini-2.0-flash-exp',\n    gemini25proPreview: 'gemini-2.5-pro-preview-03-25'\n}\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || '')\n\nexport async function callGemini(llmInput: LlmProcessProps): Promise<LlmProcessOutput> {\n    let output = null\n    let error = null\n    const model = llmInput.model || GEMINI_MODELS.gemini20flashExp\n\n    try {\n        const aiModel = genAI.getGenerativeModel({\n            model,\n            generationConfig: {\n                responseMimeType: 'application/json',\n                responseSchema: StrategiesGoogleSchema\n            }\n        })\n        const result = await aiModel.generateContent(llmInput.prompt)\n        // console.log(JSON.stringify(result))\n\n        const content = result.response.text()\n\n        try {\n            output = JSON.parse(content || '[]') as Strategy[]\n        } catch (err) {\n            error = stringifyError(err)\n            console.error(`Invalid JSON in Gemini AI output: ${error}`)\n        }\n    } catch (err) {\n        error = stringifyError(err)\n        console.error(`Error querying Gemini AI: ${error}`)\n    }\n\n    return {\n        llm: {\n            provider: 'Google',\n            model\n        },\n        response: output,\n        error\n    }\n}\n"]}