{"version":3,"file":"geminiAI.js","sourceRoot":"","sources":["../../../lib/utils/geminiAI.ts"],"names":[],"mappings":";;;AAyDA,gCAwBC;AAjFD,yDAA8E;AAGjE,QAAA,aAAa,GAAG;IACzB,+BAA+B;IAC/B,gBAAgB,EAAE,sBAAsB;CAC3C,CAAA;AAED,MAAM,KAAK,GAAG,IAAI,kCAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,IAAI,EAAE,CAAC,CAAA;AAE7E,MAAM,YAAY,GAAW;IACzB,IAAI,EAAE,0BAAU,CAAC,MAAM;IACvB,UAAU,EAAE;QACR,MAAM,EAAE;YACJ,IAAI,EAAE,0BAAU,CAAC,MAAM;YACvB,WAAW,EACP,gFAAgF;YACpF,QAAQ,EAAE,KAAK;SAClB;QACD,WAAW,EAAE;YACT,IAAI,EAAE,0BAAU,CAAC,MAAM;YACvB,WAAW,EAAE,iCAAiC;YAC9C,QAAQ,EAAE,KAAK;SAClB;KACJ;IACD,QAAQ,EAAE,CAAC,QAAQ,EAAE,aAAa,CAAC;CACtC,CAAA;AAED,MAAM,cAAc,GAAW;IAC3B,IAAI,EAAE,0BAAU,CAAC,MAAM;IACvB,UAAU,EAAE;QACR,IAAI,EAAE;YACF,IAAI,EAAE,0BAAU,CAAC,MAAM;YACvB,WAAW,EAAE,sBAAsB;YACnC,QAAQ,EAAE,KAAK;SAClB;QACD,IAAI,EAAE;YACF,IAAI,EAAE,0BAAU,CAAC,MAAM;YACvB,WAAW,EAAE,4BAA4B;YACzC,QAAQ,EAAE,KAAK;YACf,IAAI,EAAE,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC;SAClC;QACD,OAAO,EAAE;YACL,WAAW,EAAE,kCAAkC;YAC/C,IAAI,EAAE,0BAAU,CAAC,KAAK;YACtB,KAAK,EAAE,YAAY;SACtB;KACJ;IACD,QAAQ,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC;CACxC,CAAA;AAED,MAAM,MAAM,GAAG;IACX,WAAW,EAAE,oBAAoB;IACjC,IAAI,EAAE,0BAAU,CAAC,KAAK;IACtB,KAAK,EAAE,cAAc;CACxB,CAAA;AAEM,KAAK,UAAU,UAAU,CAAC,QAAyB;IACtD,IAAI,CAAC;QACD,MAAM,OAAO,GAAG,KAAK,CAAC,kBAAkB,CAAC;YACrC,KAAK,EAAE,QAAQ,CAAC,KAAK,IAAI,qBAAa,CAAC,gBAAgB;YACvD,gBAAgB,EAAE;gBACd,gBAAgB,EAAE,kBAAkB;gBACpC,cAAc,EAAE,MAAM;aACzB;SACJ,CAAC,CAAA;QACF,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,eAAe,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAA;QAC7D,sCAAsC;QAEtC,MAAM,OAAO,GAAG,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;QAEtC,IAAI,CAAC;YACD,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAe,CAAA;QACpD,CAAC;QAAC,OAAO,KAAK,EAAE,CAAC;YACb,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAA;YAC1D,OAAO,IAAI,CAAA;QACf,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAA;QACnD,OAAO,IAAI,CAAA;IACf,CAAC;AACL,CAAC","sourcesContent":["import { GoogleGenerativeAI, Schema, SchemaType } from '@google/generative-ai'\nimport { LlmProcessOutput, LlmProcessProps, Strategy } from '../types'\n\nexport const GEMINI_MODELS = {\n    // TODO: more pre-config models\n    gemini20flashExp: 'gemini-2.0-flash-exp'\n}\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_GEMINI_API_KEY || '')\n\nconst actionSchema: Schema = {\n    type: SchemaType.OBJECT,\n    properties: {\n        tokens: {\n            type: SchemaType.STRING,\n            description:\n                'Comma-separated list of symbols of the involved tokens, for example: USDC, ETH',\n            nullable: false\n        },\n        description: {\n            type: SchemaType.STRING,\n            description: 'Free text describing the action',\n            nullable: false\n        }\n    },\n    required: ['tokens', 'description']\n}\n\nconst strategySchema: Schema = {\n    type: SchemaType.OBJECT,\n    properties: {\n        name: {\n            type: SchemaType.STRING,\n            description: 'Name of the strategy',\n            nullable: false\n        },\n        risk: {\n            type: SchemaType.STRING,\n            description: 'Risk level of the strategy',\n            nullable: false,\n            enum: ['low', 'medium', 'high']\n        },\n        actions: {\n            description: 'List of actions for the strategy',\n            type: SchemaType.ARRAY,\n            items: actionSchema\n        }\n    },\n    required: ['name', 'risk', 'actions']\n}\n\nconst schema = {\n    description: 'List of strategies',\n    type: SchemaType.ARRAY,\n    items: strategySchema\n}\n\nexport async function callGemini(llmInput: LlmProcessProps): Promise<LlmProcessOutput> {\n    try {\n        const aiModel = genAI.getGenerativeModel({\n            model: llmInput.model || GEMINI_MODELS.gemini20flashExp,\n            generationConfig: {\n                responseMimeType: 'application/json',\n                responseSchema: schema\n            }\n        })\n        const result = await aiModel.generateContent(llmInput.prompt)\n        // console.log(JSON.stringify(result))\n\n        const content = result.response.text()\n\n        try {\n            return JSON.parse(content || '[]') as Strategy[]\n        } catch (error) {\n            console.error('Invalid JSON in Gemini AI output: ', error)\n            return null\n        }\n    } catch (error) {\n        console.error(`Error querying Gemini AI: ${error}`)\n        return null\n    }\n}\n"]}