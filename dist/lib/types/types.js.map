{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../lib/types/types.ts"],"names":[],"mappings":";;;AAuBA,IAAY,YAKX;AALD,WAAY,YAAY;IACpB,2BAAW,CAAA;IACX,qCAAqB,CAAA;IACrB,6BAAa,CAAA;IACb,+CAA+B,CAAA;AACnC,CAAC,EALW,YAAY,4BAAZ,YAAY,QAKvB","sourcesContent":["import { TokenResult } from 'ambire-common/dist/src/libs/portfolio/interfaces'\n\nexport type PortfolioLibToken = Pick<\n    TokenResult,\n    'symbol' | 'address' | 'networkId' | 'decimals' | 'amount' | 'priceIn'\n>\nexport type NetworkPortfolioLibResponse = {\n    tokens: PortfolioLibToken[]\n}\n\nexport type PortfolioToken = {\n    address: string\n    balance: number\n    balanceUSD: number\n    symbol: string\n    network: string\n}\n\nexport type PortfolioForNetwork = {\n    network: string\n    tokens: PortfolioToken[]\n}\n\nexport enum StrategyRisk {\n    LOW = 'low',\n    MODERATE = 'moderate',\n    HIGH = 'high',\n    OPPORTUNISTIC = 'opportunistic'\n}\n\nexport type StrategyAction = {\n    tokens: string\n    description: string\n}\n\nexport type Strategy = {\n    name: string\n    risk: StrategyRisk\n    actions: StrategyAction[]\n}\n\nexport type LlmProcessProps = {\n    prompt: string\n    model?: string\n}\n\nexport type LlmProcessOutput = {\n    llm: {\n        provider: string\n        model: string\n    }\n    response: Strategy[] | null\n    error?: string | null\n}\n\nexport type ProcessAddressProps = {\n    address: string\n    getPortfolio: (address: string) => Promise<PortfolioForNetwork[]>\n    makePrompt: (props: PromptProps) => Promise<string>\n    llmProcessor: (props: LlmProcessProps) => Promise<LlmProcessOutput>\n}\n\nexport type PromptProps = {\n    portfolio: PortfolioForNetwork[]\n}\n\nexport type AuraResponse_01 = {\n    address: string\n    portfolio: PortfolioForNetwork[]\n    strategies: LlmProcessOutput[]\n}\n"]}