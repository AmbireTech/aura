{"version":3,"file":"portfolio.js","sourceRoot":"","sources":["../../lib/utils/portfolio.ts"],"names":[],"mappings":";;;AASA,gDAaC;AAED,wCAuCC;AA/DD,oCAOiB;AAEV,KAAK,UAAU,kBAAkB,CAAC,OAAe;IACpD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,wCAAwC,OAAO,WAAW,CAAC,CAAA;IACpF,IAAI,IAAI,CAAC,EAAE,EAAE,CAAC;QACV,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAc,CAAA;QAEjE,IAAI,CAAC,OAAO,EAAE,CAAC;YACX,MAAM,IAAI,KAAK,CAAC,wBAAwB,KAAK,CAAC,OAAO,EAAE,CAAC,CAAA;QAC5D,CAAC;QAED,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAA;IACrC,CAAC;SAAM,CAAC;QACJ,MAAM,IAAI,KAAK,CAAC,wBAAwB,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC,CAAA;IAC9E,CAAC;AACL,CAAC;AAEM,KAAK,UAAU,cAAc,CAAC,EAAE,SAAS,EAAmB;IAC/D,OAAO,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,CAAC,CAAA;IAC1B,OAAO;QACH;YACI,OAAO,EAAE;gBACL;oBACI,WAAW,EACP,0FAA0F;oBAC9F,MAAM,EAAE,KAAK;iBAChB;aACJ;YACD,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,oBAAY,CAAC,GAAG;SACzB;QACD;YACI,OAAO,EAAE;gBACL;oBACI,WAAW,EAAE;;uGAEsE;oBACnF,MAAM,EAAE,KAAK;iBAChB;aACJ;YACD,IAAI,EAAE,yBAAyB;YAC/B,IAAI,EAAE,oBAAY,CAAC,MAAM;SAC5B;QACD;YACI,OAAO,EAAE;gBACL;oBACI,WAAW,EAAE;;sGAEqE;oBAClF,MAAM,EAAE,KAAK;iBAChB;aACJ;YACD,IAAI,EAAE,kBAAkB;YACxB,IAAI,EAAE,oBAAY,CAAC,IAAI;SAC1B;KACJ,CAAA;AACL,CAAC;AAEM,MAAM,cAAc,GAAG,KAAK,EAC/B,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,KAA0B;IAC3D,OAAO,EAAE,4CAA4C;IACrD,YAAY,EAAE,kBAAkB;IAChC,YAAY,EAAE,cAAc;CAC/B,EACuB,EAAE;IAC1B,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,CAAA;IAC7C,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,EAAE,SAAS,EAAE,CAAC,CAAA;IAEpD,OAAO;QACH,OAAO;QACP,SAAS;QACT,UAAU;KACb,CAAA;AACL,CAAC,CAAA;AAfY,QAAA,cAAc,kBAe1B","sourcesContent":["import {\n    Portfolio,\n    Strategy,\n    StrategyRisk,\n    ProcessAddressProps,\n    LlmProcessProps,\n    AuraResponse_01\n} from '../types'\n\nexport async function getPortfolioVelcro(address: string) {\n    const resp = await fetch(`https://velcro.ambire.com/v2/balance/${address}/ethereum`)\n    if (resp.ok) {\n        const { data, error, success } = (await resp.json()) as Portfolio\n\n        if (!success) {\n            throw new Error(`relayer call failed: ${error.message}`)\n        }\n\n        return [{ data, error, success }]\n    } else {\n        throw new Error(`relayer call failed: ${resp.status}, ${resp.statusText}`)\n    }\n}\n\nexport async function llmMockProcess({ portfolio }: LlmProcessProps): Promise<Strategy[] | null> {\n    console.log({ portfolio })\n    return [\n        {\n            actions: [\n                {\n                    description:\n                        'Stake ADX on the AdEx platform for a steady yield. This is a relatively low-risk option.',\n                    tokens: 'ADX'\n                }\n            ],\n            name: 'ADX Staking',\n            risk: StrategyRisk.LOW\n        },\n        {\n            actions: [\n                {\n                    description: `Use the 0.031 ETH to provide liquidity on a decentralized exchange (DEX) like Uniswap or Sushiswap in an ETH-paired pool. \n                Choose a pool with sufficient volume but be aware of impermanent loss risks. \n                 Pairing with a stable coin will be lower risk, while an alt-coin will be higher risk.`,\n                    tokens: 'ETH'\n                }\n            ],\n            name: 'DEX Liquidity Provision',\n            risk: StrategyRisk.MEDIUM\n        },\n        {\n            actions: [\n                {\n                    description: `Bridge a portion of the 0.031 ETH to a Layer-2 network (e.g. Arbitrum or Optimism) and explore higher-yield farming opportunities. \n                Look for reputable protocols on L2s, and exercise caution with high APY offers as they usually carry higher risks. \n                 A smaller portion of ETH should be used for exploring high risk/high reward options.`,\n                    tokens: 'ETH'\n                }\n            ],\n            name: 'L2 Yield Farming',\n            risk: StrategyRisk.HIGH\n        }\n    ]\n}\n\nexport const processAddress = async (\n    { address, getPortfolio, llmProcessor }: ProcessAddressProps = {\n        address: '0x69bfD720Dd188B8BB04C4b4D24442D3c15576D10',\n        getPortfolio: getPortfolioVelcro,\n        llmProcessor: llmMockProcess\n    }\n): Promise<AuraResponse_01> => {\n    const portfolio = await getPortfolio(address)\n    const strategies = await llmProcessor({ portfolio })\n\n    return {\n        address,\n        portfolio,\n        strategies\n    }\n}\n"]}