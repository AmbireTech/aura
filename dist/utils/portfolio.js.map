{"version":3,"file":"portfolio.js","sourceRoot":"","sources":["../../lib/utils/portfolio.ts"],"names":[],"mappings":";;;AAOA,wDAaC;AAED,oDAmCC;AAvDD,qEAAiE;AACjE,4FAAwF;AACxF,qEAAiE;AACjE,yCAA2C;AAEpC,KAAK,UAAU,sBAAsB,CAAC,OAAe,EAAE,SAAiB;IAC3E,MAAM,OAAO,GAAG,mBAAQ,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,CAAA;IAC7D,IAAI,CAAC,OAAO;QAAE,MAAM,IAAI,KAAK,CAAC,kBAAkB,SAAS,yBAAyB,CAAC,CAAA;IAEnF,MAAM,QAAQ,GAAG,IAAA,+BAAc,EAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAA;IACjE,MAAM,SAAS,GAAG,IAAI,qBAAS,CAC3B,KAAK,EACL,QAAQ,EACR,OAAO,EACP,sCAAsC,CACzC,CAAA;IAED,OAAO,SAAS,CAAC,GAAG,CAAC,OAAO,EAAE,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAA;AAC1D,CAAC;AAEM,KAAK,UAAU,oBAAoB,CAAC,OAAe;IACtD,MAAM,MAAM,GAA0B,EAAE,CAAA;IAExC,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAC/B,mBAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,sBAAsB,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CACzE,CAAA;IAED,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE,CAAC;QAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM;aACrB,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC;aAC5B,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACP,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAA;YAC3D,MAAM,QAAQ,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;iBAC7E,KAAK,CAAA;YAEV,OAAO;gBACH,MAAM,EAAE,CAAC,CAAC,MAAM;gBAChB,OAAO;gBACP,UAAU,EAAE,OAAO,GAAG,QAAQ;gBAC9B,OAAO,EAAE,CAAC,CAAC,SAAS;gBACpB,OAAO,EAAE,CAAC,CAAC,OAAO;aACrB,CAAA;QACL,CAAC,CAAC,CAAA;QAEN,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;YACjB,SAAQ;QACZ,CAAC;QAED,MAAM,CAAC,IAAI,CAAC;YACR,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO;YAC1B,MAAM;SACT,CAAC,CAAA;IACN,CAAC;IAED,OAAO,MAAM,CAAA;AACjB,CAAC;AAEM,MAAM,cAAc,GAAG,KAAK,EAC/B,EAAE,OAAO,EAAE,YAAY,EAAE,YAAY,KAA0B;IAC3D,OAAO,EAAE,4CAA4C;IACrD,YAAY,EAAE,oBAAoB;IAClC,YAAY,EAAE,yBAAc;CAC/B,EACuB,EAAE;IAC1B,MAAM,SAAS,GAAG,MAAM,YAAY,CAAC,OAAO,CAAC,CAAA;IAC7C,MAAM,UAAU,GAAG,MAAM,YAAY,CAAC,EAAE,SAAS,EAAE,CAAC,CAAA;IAEpD,OAAO;QACH,OAAO;QACP,SAAS;QACT,UAAU;KACb,CAAA;AACL,CAAC,CAAA;AAfY,QAAA,cAAc,kBAe1B","sourcesContent":["import { PortfolioForNetwork, ProcessAddressProps, AuraResponse_01 } from '../types'\n\nimport { networks } from 'ambire-common/dist/src/consts/networks'\nimport { getRpcProvider } from 'ambire-common/dist/src/services/provider/getRpcProvider'\nimport { Portfolio } from 'ambire-common/dist/src/libs/portfolio'\nimport { llmMockProcess } from './mockedAI'\n\nexport async function getPortfolioForNetwork(address: string, networkId: string) {\n    const network = networks.find((n: any) => n.id === networkId)\n    if (!network) throw new Error(`Failed to find ${networkId} in configured networks`)\n\n    const provider = getRpcProvider(network.rpcUrls, network.chainId)\n    const portfolio = new Portfolio(\n        fetch,\n        provider,\n        network,\n        'https://relayer.ambire.com/velcro-v3'\n    )\n\n    return portfolio.get(address, { baseCurrency: 'usd' })\n}\n\nexport async function getPortfolioVelcroV3(address: string) {\n    const output: PortfolioForNetwork[] = []\n\n    const responses = await Promise.all(\n        networks.map((network) => getPortfolioForNetwork(address, network.id))\n    )\n\n    for (const resp of responses) {\n        const tokens = resp.tokens\n            .filter((t) => t.amount > 0n)\n            .map((t) => {\n                const balance = Number(t.amount) / Math.pow(10, t.decimals)\n                const priceUSD = (t.priceIn.find((p) => p.baseCurrency === 'usd') || { price: 0 })\n                    .price\n\n                return {\n                    symbol: t.symbol,\n                    balance,\n                    balanceUSD: balance * priceUSD,\n                    network: t.networkId,\n                    address: t.address\n                }\n            })\n\n        if (!tokens.length) {\n            continue\n        }\n\n        output.push({\n            network: tokens[0].network,\n            tokens\n        })\n    }\n\n    return output\n}\n\nexport const processAddress = async (\n    { address, getPortfolio, llmProcessor }: ProcessAddressProps = {\n        address: '0x69bfD720Dd188B8BB04C4b4D24442D3c15576D10',\n        getPortfolio: getPortfolioVelcroV3,\n        llmProcessor: llmMockProcess\n    }\n): Promise<AuraResponse_01> => {\n    const portfolio = await getPortfolio(address)\n    const strategies = await llmProcessor({ portfolio })\n\n    return {\n        address,\n        portfolio,\n        strategies\n    }\n}\n"]}